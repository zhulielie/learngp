var jSing={get:function(a,c){for(var b=a,d=1;d<arguments.length;d++)if(b=b[arguments[d]],void 0===b)return!1;return b},set:function(a,c){return ergodic_set(a,arguments,1)?!0:!1},create:function(a,c){return ergodic_create(a,arguments,1)?!0:!1},delete:function(a,c){return ergodic_delete(a,arguments,1)?!0:!1},push:function(a,c){var b=arguments;return 2==b.length?(isNode(a)?a[jSing.getLength(a)]=c:(b=a,delete a,jSing.create(a,0,b),jSing.create(a,1,c)),!0):ergodic_push(a,b,1)?!0:!1},pop:function(a,c){var b=
ergodic_pop(a,arguments,1);return b?b:!1},arr2json:function(a){if(1==arguments.length){var c={},b;for(b in a)c[b]=a[b];return c}},json2arr:function(a){if(1==arguments.length){var c=[],b;for(b in a){var d={};d[b]=a[b];c.push(d)}return c}},getStr:function(a){return JSON.stringify(a)},getJson:function(a){return JSON.parse(a)},print_r:function(a){console.log("{");ergodic_print(a,"");console.log("}")},getLength:function(a){var c=0,b;for(b in a)c++;return c}};
function ergodic_print(a,c){var b="    "+c;if(a.constructor==Object||a.constructor==Array)for(var d in a)void 0==a[d]?console.log(b+"["+d+"] => undefined"):a[d].constructor==Array||a[d].constructor==Object?(console.log(b+"["+d+"] => "+typeof a+""),console.log(b+"{"),ergodic_print(a[d],b),console.log(b+"}")):a[d].constructor==String?console.log(b+"["+d+"] => '"+a[d]+"'"):console.log(b+"["+d+"] => "+a[d]+"")}
function ergodic_set(a,c,b){if(a.constructor==Object&&void 0!=a[c[b]]){if(b<c.length-2)return ergodic_set(a[c[b]],c,b+1);a[c[b]]=c[b+1];return!0}}function ergodic_create(a,c,b){if(a.constructor==Object){if(void 0!=a[c[b]]){if(b<c.length-2)return ergodic_create(a[c[b]],c,b+1);a[c[b]]=c[b+1];return!0}if(b<c.length-1){for(var d=c[c.length-1],e=c.length-2;e>b;e--){var f={};f[c[e]]=d;d=f}a[c[b]]=d;return!0}}}
function ergodic_delete(a,c,b){if(a.constructor==Object&&void 0!=a[c[b]]){if(b<c.length-1)return ergodic_delete(a[c[b]],c,b+1);delete a[c[b]];return!0}}function getJsonFormat(a){return void 0==a?void 0:a.constructor==String?'"'+a+'"':a}
function ergodic_push(a,c,b){if(a.constructor==Object){if(void 0!=a[c[b]]){if(b<c.length-2)return ergodic_push(a[c[b]],c,b+1);if(isNode(a[c[b]]))a[c[b]][jSing.getLength(a[c[b]])]=c[b+1];else{var d=a[c[b]];delete a[c[b]];jSing.create(a,c[b],0,d);jSing.create(a,c[b],1,c[b+1])}return!0}if(b<c.length-1){for(var e=c[c.length-1],f=c.length-2;f>b;f--)d={},d[c[f]]=e,e=d;jSing.create(a,c[b],0,e);return!0}}}
function ergodic_pop(a,c,b){if(a.constructor==Object){if(void 0!=a[c[b]]){if(b<c.length-1)return ergodic_set(a[c[b]],c,b+1);var d=a[c[b]][jSing.getLength(a[c[b]])-1];delete a[c[b]][jSing.getLength(a[c[b]])-1];return d}c=jSing.getLength(a)-1;d=a[c];delete a[c];return d}}function isNode(a){return a.constructor==Object?!0:!1}
function push_insert(a,c,b){if(isNode(a))a[jSing.getLength(a)]=c[b+1];else return delete a,2==c.length?(jSing.create(a,0,a),jSing.create(a,1,c[1])):(jSing.create(a,c[b],0,a),jSing.create(a,c[b],1,c[b+1])),!0};