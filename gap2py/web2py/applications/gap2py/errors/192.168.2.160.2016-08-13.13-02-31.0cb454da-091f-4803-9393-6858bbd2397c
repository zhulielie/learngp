(dp1
S'output'
p2
S"<type 'exceptions.UnboundLocalError'> local variable 's' referenced before assignment"
p3
sS'layer'
p4
S'/usr/nc-home/gap2py/web2py/applications/gap2py/controllers/index.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# \xe5\xb0\x9d\xe8\xaf\x95\n\nimport gluon.contrib.simplejson as sj\nfrom zcommon import *\n\n\ndef index():\n    user = session.user or \'\'\n    if user:\n        return dict(username=\'admin\')\n    else:\n        return redirect(\'/gap2py/login/\')\n\n\ndef something():\n\n    d = {}\n    d[\'diskstr\'] = \'\'\'df -h | grep replace | head -n 1 | awk \'{print $5}\' | tr -s " "\'\'\'\n    d[\'cpugetstr\'] = \'\'\'vmstat | sed -n \'3p\' | awk \'{print $17}\' | tr -s " "\'\'\'\n    d[\'memstr\'] = \'\'\'vmstat | sed -n \'3p\' | awk \'{print $5}\' | tr -s " "\'\'\'\n    d[\'uptimestr\'] = \'\'\'uptime | awk \'{print $1" "$2" "$3$4$5}\' | tr -s " "\'\'\'\n    return d\n\n\ndef get_config():\n    user = session.user or \'\'\n    if user:\n        f = open("%s%s" % (dpath(), "db/config.json"), "r");\n        try:\n            s = json.load(f)\n        except Exception as e:\n            print e\n        finally:\n            f.close()\n    else:\n        return redirect(\'/login/\')\n\n    return sj.dumps(s)\n\n\ndef get_status():\n    import commands\n    user = session.get(\'user\', \'\')\n    if user:\n        try:\n            if getplatform():\n                try:\n                    f = open("%s%s" % (dpath(), "db/getstatus.json"), "r")\n                    s = json.load(f)\n                except:\n                    pass\n                finally:\n                    f.close()\n            else:\n                ad = getdtype()\n                try:\n\n                    word = something()[\'diskstr\'].replace(\'replace\', \'ad%s\' % ad[\'iad\'])\n                    print word\n                    diskstatus_ia = commands.getoutput(word)[:-1]\n                except Exception as e:\n                    print e\n                    diskstatus_ia = 0\n\n                try:\n                    diskstatus_oa = verification_ssh(rsetting(), something()[\'diskstr\'].replace(\'replace\', \'ad%ss2\' % ad[\'oad\']))\n                    diskstatus_oa = (diskstatus_oa.split(\'\\n\'))[1:-1][0]\n                    diskstatus_oa = diskstatus_oa.strip(\'\\r\')[:-1]\n                except Exception as e:\n                    print e\n                    diskstatus_oa = 0\n\n                try:\n                    memstr_ia = commands.getoutput(something().memstr)\n                    memstr_ia = "%.2f" % (float(memstr_ia) / 2048000)\n                    memstr_ia = float(memstr_ia) * 100\n                    memstr_ia = int(memstr_ia)\n                    memstr_ia = str(memstr_ia)\n\n                except:\n                    memstr_ia = 0\n                try:\n                    memstr_oa = verification_ssh(rsetting(), something().memstr)\n                    memstr_oa = (memstr_oa.split(\'\\n\'))[1:-1][0]\n                    memstr_oa = float(memstr_oa.strip(\'\\r\'))\n                    memstr_oa = "%.2f" % (memstr_oa / 2048000)\n                    memstr_oa = int(float(memstr_oa) * 100)\n                    memstr_oa = str(memstr_oa)\n                except:\n                    memstr_oa = 0\n\n                try:\n                    cpu_ia = commands.getoutput(something().cpugetstr)\n                except:\n                    cpu_ia = 0\n                try:\n                    cpu_oa = verification_ssh(rsetting(), something().cpugetstr)\n                    cpu_oa = (cpu_oa.split(\'\\n\'))[1:-1][0]\n                    cpu_oa = cpu_oa.strip(\'\\r\')\n\n                except:\n                    cpu_oa = 0\n\n                try:\n                    uptime_ia = commands.getoutput(something().uptimestr).strip(\'\\r\').replace(\',\', \' \')\n                except:\n                    uptime_ia = 0\n\n                try:\n                    uptime_oa = verification_ssh(rsetting(), something().uptimestr)\n                    uptime_oa = (uptime_oa.split(\'\\n\'))[1:-1][0]\n                    uptime_oa = uptime_oa.strip(\'\\r\').replace(\',\', \' \')\n                except:\n                    uptime_oa = 0\n\n                s = {"ia": {}, "oa": {}}\n                s[\'ia\'][\'cpu\'] = cpu_ia\n                s[\'ia\'][\'memory\'] = memstr_ia\n                s[\'ia\'][\'disk\'] = diskstatus_ia\n                s[\'ia\'][\'uptime\'] = uptime_ia\n                s[\'oa\'][\'cpu\'] = cpu_oa\n                s[\'oa\'][\'memory\'] = memstr_oa\n                s[\'oa\'][\'disk\'] = diskstatus_oa\n                s[\'oa\'][\'uptime\'] = uptime_oa\n        except Exception as e:\n            print e\n\n    else:\n        return redirect(\'login/index\')\n    return sj.dumps(s)\n\n\ndef getlicense():\n    s = {}\n    try:\n        f = open("%s%s" % (dpath(), "db/license.json"), "r");\n        s = json.load(f)\n\n    except Exception as e:\n        print e\n    finally:\n        f.close()\n    if s.get(\'license\'):\n        return s[\'license\']\n    else:\n        return \'\'\n\n\ndef checklicensenow():\n    oldlicense = getlicense()\n    if oldlicense:\n        from mnLicense import MNLicense\n\n        key = ["9878*(&^^&)0LLIu(*&^))#$@!KJLKJj", "8midnet8", b\'1815122959500519\']\n        try:\n            FLAG = MNLicense(key).checklicense(oldlicense)\n        except Exception as e:\n            print e\n            FLAG = False\n    return FLAG\n\n\ndef license_index():\n    from mnLicense import MNLicense\n    key = ["9878*(&^^&)0LLIu(*&^))#$@!KJLKJj", "8midnet8", b\'1815122959500519\']\n    obj = MNLicense(key)\n    status = \'license Error\'\n    mash = obj.creatmash(obj.creatdict())\n\n    if request.method == \'GET\':\n        ol = getlicense()\n        f = False\n    else:\n        ol = request.form.get(\'license\', \'\')\n        f = True\n    if ol:\n        try:\n\n            if obj.checklicense(ol):\n                status = \'License \'\n            if f:\n                save_license(ol)\n        except:\n            pass\n    response.view = \'license.html\'\n    return dict(status=status, mash=mash)\n\n\ndef save_license(license):\n    s = False\n    try:\n        f = open("%s%s" % (dpath(), "db/license.json"), "w");\n        json.dump({"license": license}, f)\n        s = True\n    except:\n        pass\n    finally:\n        f.close()\n    return s\n\n\ndef skin_config():\n    user = session.get(\'user\', \'\')\n    if user:\n        response.view = \'skin-config.html\'\n        return dict()\n    else:\n        return redirect(\'login_get\')\n\n\ndef getlog():\n    s = {}\n    if getplatform():\n        try:\n            f = open("%s%s" % (dpath(), "db/log.json"), "r")\n            s = f.read()\n        except:\n            pass\n        finally:\n            f.close()\n    else:\n        try:\n            import commands\n            l = commands.getoutput("dmesg -a")\n            s = (l.split(\'\\n\'))\n        except Exception as e:\n            print e\n\n    return s\n\n\ndef getoalog():\n    s = {}\n    if getplatform():\n        try:\n            f = open("%s%s" % (dpath(), "db/log.json"), "r")\n            s = f.read()\n        except:\n            pass\n        finally:\n            f.close()\n    else:\n        oacontent = "dmesg -a"\n        try:\n            l = verification_ssh(rsetting(), oacontent)\n            s = (l.split(\'\\n\'))[1:-1]\n\n\n        except Exception as e:\n            print e\n\n    return s\n\n\ndef get_log():\n    user = session.user or \'\'\n    if user:\n        data = {\'ia\': [], \'iacount\': 0, \'oa\': [], \'oacount\': 0}\n        oalog = []\n        ialog = []\n\n        try:\n            ialogs = getlog()\n            iacount = 0\n            oacount = 0\n            for x in ialogs:\n                if len(x) > 5:\n                    x = x.replace(\'\\r\', \'\').replace(\',\', \'\')\n\n                    ialog.append(unicode(x, errors=\'ignore\'))\n                    iacount += 1\n            data[\'ia\'] = ialog\n            data[\'iacount\'] = iacount\n        except Exception as e:\n            print e\n        try:\n            oalogs = getoalog()\n            for x in oalogs:\n                if len(x) > 5:\n                    x = x.replace(\'\\r\', \'\').replace(\',\', \'\')\n\n                    oalog.append(unicode(x, errors=\'ignore\'))\n                    oacount += 1\n            data[\'oa\'] = oalog\n            data[\'oacount\'] = oacount\n        except Exception as e:\n            print e\n\n        try:\n            print data\n            feedback = sj.dumps(data)\n        except Exception as e:\n            print e\n            feedback = data\n        return feedback\n    else:\n        return redirect(\'/login/index\')\n\n\ndef save():\n    data = {\'succ\': False}\n    user = session.get(\'user\', \'\')\n    if user:\n        cmd = request.vars.cmd\n        config = request.vars.config\n        try:\n            f = open("%s%s" % (dpath(), "db/config.json"), \'w\')\n            json_config = json.loads(config)\n            jc = json_config.get(\'changepass\')\n            if jc:\n                changepass(json_config[\'changepass\'])\n                del json_config[\'changepass\']\n\n            data[\'succ\'] = setconfig(json_config)\n        except Exception as e:\n            print e\n\n            data[\'succ\'] = False\n        finally:\n            f.close()\n        return sj.dumps(data)\n    else:\n        return redirect(\'/gap2py/login/index\')\n\n\ndef changepass(passw):\n    if passw:\n        if passw[\'oldpass\'] and passw[\'newpass1\'] and passw[\'newpass2\']:\n            if passw[\'newpass1\'] == passw[\'newpass2\']:\n                if len(passw[\'newpass1\']) >= 6:\n                    try:\n                        s = getusers()\n                        import hashlib\n                        m2 = hashlib.md5()\n                        m2.update(passw[\'newpass1\'])\n                        mold = hashlib.md5()\n                        mold.update(passw[\'oldpass\'])\n                        if mold.hexdigest() == s[\'password\']:\n                            s[\'password\'] = m2.hexdigest()\n                            setusers(s)\n\n                    except Exception as e:\n                        print e\n\n\ndef write_iarule(rulename, rules):\n\n\n    cotent = \'\'\n    for rule in rules:\n        if rulename in ["OUT_TCP", "OUT_UDP", "OUT_FTP", "OUT_ORA"]:\n            cotent += \'\'\'PORT=%s:%s\\n\'\'\' % (rule[\'myadr\'], rule[\'myport\'])\n        else:\n            cotent += \'\'\'SERVER=%s:%s-%s:%s\\n\'\'\' % (rule[\'hisadr\'], rule[\'hisport\'], rule[\'myadr\'], rule[\'myport\'])\n\n    try:\n\n        if getplatform():\n            rfname = open("%s%s%s" % (dpath(), "db/ia/", rulename), "w")\n        else:\n            rfname = open("%s%s" % ("/usr/nc-home/sox/", rulename), "w")\n\n        rfname.write(cotent)\n    except Exception as e:\n        print e\n    finally:\n        rfname.close()\n\n\ndef write_ia_detail(config):\n\n    if config[\'dt\'][\'rd\'] == 0:\n        rs = [ "IN_TCP", "IN_UDP", "IN_FTP", "IN_ORA"]\n    elif config[\'dt\'][\'rd\'] == 1:\n        rs = ["OUT_TCP", "OUT_UDP", "OUT_FTP", "OUT_ORA"]\n    else:\n        rs = ["OUT_TCP", "OUT_UDP", "OUT_FTP", "OUT_ORA", "IN_TCP", "IN_UDP", "IN_FTP", "IN_ORA"]\n    for i in rs:\n        if config[i][\'on\'] == \'1\':\n            write_iarule(i, config[i][\'rules\'])\n\n\ndef write_oarule(rulename, rules):\n\n\n\n    cotent = \'\'\n    flag = True\n    for rule in rules:\n        if rulename in ["IN_TCP", "IN_UDP", "IN_FTP", "IN_ORA"]:\n            cotent += \'\'\'echo \'PORT=%s:%s\' %s  /usr/nc-home/sox/%s;\'\'\' % (\n                rule[\'myadr\'], rule[\'myport\'], \'>\' if flag else \'>>\', rulename)\n        else:\n            cotent += \'\'\'echo \'SERVER=%s:%s-%s:%s\' %s /usr/nc-home/sox/%s;\'\'\' % (\n                rule[\'hisadr\'], rule[\'hisport\'], rule[\'myadr\'], rule[\'myport\'], \'>\' if flag else \'>>\', rulename)\n        flag = False\n    if not rules:\n        cotent += \'\'\'echo \'\' > /usr/nc-home/sox/%s;\'\'\' % rulename\n\n    if getplatform():\n        try:\n            rfname = open("%s%s%s" % (dpath(), "db/oa/", rulename), "w")\n            rfname.write(cotent)\n        except Exception as e:\n            print e\n        finally:\n            rfname.close()\n    else:\n        try:\n            verification_ssh(rsetting(), cotent)\n        except Exception as e:\n\n            print e\n\n\ndef write_oa_detail(config):\n    if config[\'dt\'][\'rd\'] == 0:\n        rs = [ "IN_TCP", "IN_UDP", "IN_FTP", "IN_ORA"]\n    elif config[\'dt\'][\'rd\'] == 1:\n        rs = ["OUT_TCP", "OUT_UDP", "OUT_FTP", "OUT_ORA"]\n    else:\n        rs = ["OUT_TCP", "OUT_UDP", "OUT_FTP", "OUT_ORA", "IN_TCP", "IN_UDP", "IN_FTP", "IN_ORA"]\n    for i in rs:\n        if config[i][\'on\'] == \'1\':\n            write_oarule(i, config[i][\'rules\'])\n\n\n\ndef setconfig(config):\n    try:\n        f = open("%s%s" % (dpath(), "db/config.json"), "w");\n        json.dump(config, f)\n        try:\n            dt = getdtype()\n            config[\'dt\'] = dt\n            write_ia_rcconf(config[\'ia\'])\n            write_oa_rcconf(config[\'oa\'])\n            write_ia_rclocal(config)\n            write_oa_rclocal(config)\n            write_ia_router(config[\'ia\'][\'router\'])\n            write_oa_router(config[\'oa\'][\'router\'])\n            write_ia_carp(config[\'ia\'][\'hs\'])\n            write_oa_carp(config[\'oa\'][\'hs\'])\n            write_ia_sox(config)\n            write_oa_sox(config)\n            write_ia_detail(config)\n            write_oa_detail(config)\n            try:\n                n = open("%s%s" % (dpath(), "db/needrestart"), \'w\')\n            except Exception as e:\n                print e\n            finally:\n                n.close()\n        except Exception as e:\n            print e\n\n        flag = True\n    except Exception as e:\n        print e\n        flag = False\n    finally:\n        f.close()\n\n    return flag\n\n\ndef write_oa_rcconf(config):\n    if getplatform():\n        tmp_rc = open("%s%s" % (dpath(), "db/oa/rc.local"), "w")\n    else:\n        tmp_rc = \'/etc/rc.local\'\n\n    oacontent = \'\'\'echo \'sshd_enable="YES"\' > %s;\'\'\' % tmp_rc\n    oacontent += \'\'\'echo \'update_motd="NO"\' >> %s;\'\'\' % tmp_rc\n    oacontent += \'\'\'echo \'gateway_enable="YES"\' >> %s;\'\'\' % tmp_rc\n    oacontent += \'\'\'echo \'syslogd_enable="YES"\' >> %s;\'\'\' % tmp_rc\n    oacontent += \'\'\'echo \'syslogd_flags="-ss" \' >> %s;\'\'\' % tmp_rc\n    if config[\'defaultgateway\']:\n        oacontent += \'\'\'echo \'defaultrouter="%s"\' >> %s;\'\'\' % (config[\'defaultgateway\'], tmp_rc)\n    oacontent += \'\'\'echo \'hostname="MFOA"\' >> %s;\'\'\' % tmp_rc\n    ind = -1\n    for i in config[\'interface\']:\n        ind += 1\n        oacontent += \'\'\'echo \'ifconfig_%s_alias%s="inet %s netmask %s"\' >> %s;\'\'\' % (\n            i[\'name\'], ind, i[\'adr\'], i[\'netmask\'], tmp_rc)\n    oacontent += \'\'\'echo \'ifconfig_em4="inet 2.2.2.2 netmask 255.255.255.0"\' >> %s;\'\'\' % tmp_rc\n    if getplatform():\n        tmp_rc.write(oacontent)\n        tmp_rc.close()\n    else:\n        try:\n            verification_ssh(rsetting(), oacontent)\n        except Exception as e:\n            print e\n\n\ndef write_oa_rclocal(config):\n    if getplatform():\n        tmp_rc = open("%s%s" % (dpath(), "db/oa/rc.local"), "w")\n    else:\n        tmp_rc = \'/etc/rc.local\'\n\n    adx = config[\'dt\'][\'ad\']\n\n    oacontent = \'\'\'echo \'fsck_ufs -y /dev/ad%s2 >/dev/null\' > %s;\'\'\' % (adx, tmp_rc)\n    oacontent += \'\'\'echo \'mount /dev/ad%ss2 /usr/nc-home\' >> %s;\'\'\' % (adx, tmp_rc)\n    oacontent += \'\'\'echo \'if [ -f /usr/nc-home/baktgz/patch.tgz ]; then\' >> %s;\'\'\' % (tmp_rc)\n    oacontent += \'\'\'echo \'\ttar xzfP /usr/nc-home/baktgz/patch.tgz\' >> %s;\'\'\' % (tmp_rc)\n    oacontent += \'\'\'echo \'\trm /usr/nc-home/baktgz/patch.tgz\' >> %s;\'\'\' % (tmp_rc)\n    oacontent += \'\'\'echo \'fi\' >> %s;\'\'\' % (tmp_rc)\n    oacontent += \'\'\'echo \'ifconfig em5 up\' >> %s;\'\'\' % (tmp_rc)\n    oacontent += \'\'\'echo \'sleep 2\' >> %s;\'\'\' % (tmp_rc)\n    oacontent += \'\'\'echo \'ifconfig em4 up\' >> %s;\'\'\' % (tmp_rc)\n    oacontent += \'\'\'echo \'sleep 2\' >> %s;\'\'\' % (tmp_rc)\n    if config[\'dt\'][\'rt\'] == 1:\n        oacontent += \'\'\'echo \'sysctl -w hw.owd_recvif=em5\' >> %s;\'\'\' % (tmp_rc)\n        oacontent += \'\'\'echo \'sysctl -w hw.owd_sendif=em5\' >> %s;\'\'\' % (tmp_rc)\n        oacontent += \'\'\'echo \'cd /usr/nc-home/bin/ && ./prog.sh &\' >> %s;\'\'\' % (tmp_rc)\n        oacontent += \'\'\'echo \'cd /usr/nc-home/socks && ./sockd -D -f socks.conf\' >> %s;\'\'\' % (tmp_rc)\n    else:\n        oacontent += \'\'\'echo \'ipnat -CF -f /usr/nc-home/gap2py/db/on.conf\' >> %s;\'\'\' % (tmp_rc)\n\n    if getplatform():\n        tmp_rc.write(oacontent)\n        tmp_rc.close()\n    else:\n        try:\n            verification_ssh(rsetting(), oacontent)\n        except Exception as e:\n            print e\n\n\ndef write_oa_router(config):\n    if getplatform():\n        tmp_rc = open("%s%s" % (dpath(), "db/oa/router.conf"), "w")\n    else:\n        tmp_rc = \'/etc/rc.local\'\n\n    oacontent = \'\'\n    begin = True\n\n    for i in config:\n        oacontent += \'\'\'echo \'route add %s %s %s\' %s /usr/nc-home/conf/router.conf;\'\'\' % (\n            i[\'network\'], i[\'gateway\'], i[\'netmask\'], \'> \' if begin else \'>>\')\n        begin = False\n    if not config:\n        oacontent = \'\'\'echo \'\' > /usr/nc-home/conf/router.conf;\'\'\'\n    if getplatform():\n        try:\n            tmp_rc.write(oacontent)\n        except Exception as e:\n            print e\n        finally:\n            tmp_rc.close()\n    else:\n\n        try:\n            verification_ssh(rsetting(), oacontent)\n        except Exception as e:\n            print e\n\n\ndef write_oa_carp(config):\n    oacontent = \'\'\n    begin = True\n    # for i in config[\'rules\']:\n\n    if getplatform():\n        tmp_rc = open("%s%s" % (dpath(), "db/oa/carp.conf"), "w")\n\n    if config[\'on\'] == \'0\' or not config[\'rules\']:\n        oacontent = \'\'\'echo \'\' > /usr/nc-home/conf/carp.conf;\'\'\'\n    else:\n        for i in config[\'rules\']:\n            if (i[\'on\'] == \'1\'):\n                oacontent += \'\'\'echo \'ifconfig carp%s create %s netmask %s vhid %s advskew %s\' %s /usr/nc-home/conf/carp.conf; \'\'\' % (\n                    i[\'gid\'], i[\'adr\'], i[\'netmask\'], i[\'gid\'], \'100\' if i[\'master\'] == \'1\' else \'101\',\n                    \'> \' if begin else \'>>\')\n\n                begin = False\n    try:\n        if getplatform():\n            tmp_rc.write(oacontent)\n        else:\n            verification_ssh(rsetting(), oacontent)\n    except Exception as e:\n        print "write oa carp error:%s" % str(e)\n\n\ndef write_oa_sox(config):\n\n\n    if getplatform():\n        tmp_sox = open("%s%s" % (dpath(), "db/oa/nsox.conf"), "w")\n    else:\n        if config[\'dt\'][\'rt\'] == 0:\n\n            tmp_sox = \'/usr/nc-home/sox/nsox.conf\'\n        else:\n            tmp_sox = \'/usr/nc-home/sox/sox.conf\'\n\n\n\n    if config[\'dt\'][\'rt\'] == 0:\n        flag_type = config[\'dt\'][\'rd\']\n        if flag_type == 0:\n            # jinzhuru\n            if config["IN_TCP"][\'on\'] == \'1\':\n                oacontent = \'\'\'echo \'map em4 0.0.0.0/0 -> 0/32\' > %s;\'\'\' % tmp_sox\n                for rule in config[\'IN_TCP\'][\'rules\']:\n                    oacontent += \'\'\'echo \'rdr em0 %s/32 port %s -> 2.2.2.2 port %s\' >>%s;\'\'\' % (\n                        rule[\'myadr\'], rule[\'myport\'], rule[\'myport\'], tmp_sox)\n\n\n\n        elif flag_type == 1:\n            # jinzhunchu\n\n            if config["OUT_TCP"][\'on\'] == \'1\':\n                oacontent = \'\'\'echo \'map em0 0.0.0.0/0 -> 0/32\' > %s;\'\'\' % tmp_sox\n                for rule in config[\'OUT_TCP\'][\'rules\']:\n                    oacontent += \'\'\'echo \'rdr em4 0.0.0.0/0 port %s -> %s port %s\' >>%s;\'\'\' % (\n                        rule[\'myport\'], rule[\'hisadr\'], rule[\'hisport\'], tmp_sox)\n        else:\n            oacontent = \'\'\n            # zhunru he zhunchu\n            if config["IN_TCP"][\'on\'] == \'1\':\n\n                oacontent += \'\'\'echo \'map em4 0.0.0.0/0 -> 0/32\' > %s;\'\'\' % tmp_sox\n                for rule in config[\'IN_TCP\'][\'rules\']:\n                    oacontent += \'\'\'echo \'rdr em0 %s/32 port %s -> 2.2.2.2 port %s\' >>%s;\'\'\' % (\n                        rule[\'myadr\'], rule[\'myport\'], rule[\'myport\'], tmp_sox)\n\n            if config["OUT_TCP"][\'on\'] == \'1\':\n                oacontent += \'\'\'echo \'map em0 0.0.0.0/0 -> 0/32\' > %s;\'\'\' % tmp_sox\n                for rule in config[\'OUT_TCP\'][\'rules\']:\n                    oacontent += \'\'\'echo \'rdr em4 0.0.0.0/0 port %s -> %s port %s\' >>%s;\'\'\' % (\n                        rule[\'myport\'], rule[\'hisadr\'], rule[\'hisport\'], tmp_sox)\n    else:\n        oacontent = \'\'\'echo \'COMMIN=/dev/owd0\' > %s;\'\'\' % tmp_sox\n        oacontent += \'\'\'echo \'COMMOUT=/dev/owd0\' >> %s;\'\'\' % tmp_sox\n\n        flag_type = config[\'dt\'][\'rd\']\n        if flag_type == 0:\n            # jinzhuru\n\n            rs = [ "IN_TCP", "IN_UDP", "IN_FTP", "IN_ORA"]\n\n        elif flag_type == 1:\n            # jinzhunchu\n            rs = ["OUT_TCP", "OUT_UDP", "OUT_FTP", "OUT_ORA"]\n\n        else:\n\n\n            rs = ["OUT_TCP", "OUT_UDP", "OUT_FTP", "OUT_ORA", "IN_TCP", "IN_UDP", "IN_FTP", "IN_ORA"]\n        for i in rs:\n            if config[i][\'on\'] == \'1\':\n                oacontent += \'\'\'echo \'FILE=/usr/nc-home/sox/%s\'>> %s;\'\'\' % (i, tmp_sox)\n        oacontent += \'\'\'echo \'LOG=1\' >> %s;\'\'\' % tmp_sox\n        oacontent += \'\'\'echo \'TCPIDLETIMEOUT=604800\' >> %s;\'\'\' % tmp_sox\n        realpath = \'/usr/nc-home/sox/sox.conf.new\'\n\n    if getplatform():\n        tmp_sox.write(oacontent)\n        tmp_sox.close()\n    else:\n        try:\n            verification_ssh(rsetting(), oacontent)\n        except Exception as e:\n            print e\n\n\n\ndef write_ia_rcconf(config):\n    try:\n        if getplatform():\n            bsdfile_rcconf = open("%s%s" % (dpath(), "db/ia/rc.conf"), "w")\n        else:\n            bsdfile_rcconf = open("/etc/rc.conf", "w")\n        iacontent = \'sshd_enable="YES"\\n\'\n        iacontent += \'update_motd="NO"\\n\'\n        iacontent += \'gateway_enable="YES"\\n\'\n        iacontent += \'fsck_enable="YES"\\n\'  # add\n        iacontent += \'syslogd_enable="YES"\\n\'\n        iacontent += \'syslogd_flags="-ss"\\n\'\n        if config[\'defaultgateway\']:\n            iacontent += \'defaultrouter="%s"\\n\' % config[\'defaultgateway\']\n        iacontent += \'hostname="MFIA"\\n\'\n        ind = -1\n        for i in config[\'interface\']:\n            ind += 1\n            iacontent += \'ifconfig_%s_alias%s="inet %s netmask %s"\\n\' % (i[\'name\'], ind, i[\'adr\'], i[\'netmask\'])\n\n        iacontent += \'ifconfig_em4="inet 2.2.2.1 netmask 255.255.255.0"\\n\'\n        iacontent += \'ifconfig_em5="inet 5.5.5.1 netmask 255.255.255.0"\\n\'\n        bsdfile_rcconf.write(iacontent)\n        bsdfile_rcconf.close()\n        flag = True\n    except Exception as e:\n        print e\n        flag = False\n    finally:\n        if bsdfile_rcconf:\n            bsdfile_rcconf.close()\n    return flag\n\n\ndef write_ia_rclocal(config):\n    try:\n        if getplatform():\n            bsdfile_rcconf = open("%s%s" % (dpath(), "db/ia/rc.local"), "w")\n        else:\n            bsdfile_rcconf = open("/etc/rc.local", "w")\n\n        iacontent = \'if [ -f /usr/nc-home/baktgz/patch.tgz ]; then\\n\'\n        iacontent += \'\ttar xzfP /usr/nc-home/baktgz/patch.tgz\\n\'\n        iacontent += \'\trm /usr/nc-home/baktgz/patch.tgz\\n\'\n        iacontent += \'fi\\n\'\n        iacontent += \'ifconfig em4 up\\n\'\n        iacontent += \'sleep 2\\n\'\n        iacontent += \'ifconfig em5 up\\n\'\n        iacontent += \'sleep 2\\n\'\n        iacontent += \'ln -s /usr/nc-home/local /usr/local\\n\'\n        iacontent += \'ln -s /usr/nc-home/libstdc++.so.6 /usr/lib/libstdc++.so.6\\n\'\n        iacontent += \'ln -s /usr/nc-home/uniq /usr/bin/uniq\\n\'\n        if config[\'dt\'][\'rt\'] == 1:\n            iacontent += \'sysctl -w hw.owd_recvif=em5\\n\'\n            iacontent += \'sysctl -w hw.owd_sendif=em5\\n\'\n            iacontent += \'cd /usr/nc-home/bin/ && ./prog.sh &\\n\'\n            iacontent += \'/usr/nc-home/bin/db.sh\\n\'\n        else:\n\n            iacontent += \'ipnat -CF -f /usr/nc-home/gap2py/db/in.conf\\n\'\n\n        bsdfile_rcconf.write(iacontent)\n        bsdfile_rcconf.close()\n        flag = True\n    except Exception as e:\n        print e\n        flag = False\n    finally:\n        if bsdfile_rcconf:\n            bsdfile_rcconf.close()\n    return flag\n\n\ndef write_ia_router(config):\n    try:\n        if getplatform():\n            bsdfile_router = open("%s%s" % (dpath(), "db/ia/router.conf"), "w")\n        else:\n            bsdfile_router = open("/etc/router.conf", "w")\n        iacontent = \'\'\n        for i in config:\n            iacontent += \'route add %s %s %s\\n\' % (i[\'network\'], i[\'gateway\'], i[\'netmask\'])\n        bsdfile_router.write(iacontent)\n        flag = True\n    except Exception as e:\n        print e\n        flag = False\n    finally:\n        bsdfile_router.close()\n    return flag\n\n\ndef write_ia_carp(config):\n    try:\n\n        bsdfile_router = open("%s%s" % (dpath(), "db/ia/carp.conf"), "w")\n        iacontent = \'\'\n        if config[\'on\'] == \'1\':\n            for i in config[\'rules\']:\n                iacontent += \'ifconfig carp%s create %s netmask %s vhid %s advskew %s\\n\' % (\n                    i[\'gid\'], i[\'adr\'], i[\'netmask\'], i[\'gid\'], \'100\' if i[\'master\'] == \'1\' else \'101\',)\n            bsdfile_router.write(iacontent)\n        flag = True\n    except Exception as e:\n        flag = False\n        print "Write ia carp error :%s" % str(e)\n    finally:\n        bsdfile_router.close()\n    return flag\n\n\ndef write_ia_sox(config):\n\n    try:\n        if getplatform():\n            bsdfile_router = open("%s%s" % (dpath(), "db/ia/nsox.conf"), "w")\n        else:\n            if config[\'dt\'][\'rt\'] == 0:\n\n                bsdfile_router = open("/usr/nc-home/sox/nsox.conf", "w")\n            else:\n                bsdfile_router = open("/usr/nc-home/sox/sox.conf", "w")\n\n        if config[\'dt\'][\'rt\'] == 0:\n\n            flag_type = config[\'dt\'][\'rd\']\n            if flag_type == 0:\n                # jinzhunru\n                if config["IN_TCP"][\'on\'] == \'1\':\n                    iacontent = \'map em0 0.0.0.0/0 -> 0/32\\n\'\n\n                    for rule in config[\'IN_TCP\'][\'rules\']:\n                        iacontent += \'\'\'rdr em4 0.0.0.0/0 port %s -> %s port %s\\n\'\'\' % (\n                            rule[\'myport\'], rule[\'hisadr\'], rule[\'hisport\'])\n\n            elif flag_type == 1:\n                # jinzhunchu\n\n\n                if config["OUT_TCP"][\'on\'] == \'1\':\n                    iacontent = \'map em4 0.0.0.0/0 -> 0/32\\n\'\n\n                    for rule in config[\'OUT_TCP\'][\'rules\']:\n                        iacontent += \'\'\'rdr em0 %s/32 port %s -> 2.2.2.2 port %s\\n\'\'\' % (\n                            rule[\'myadr\'], rule[\'myport\'], rule[\'myport\'])\n\n\n\n            else:\n                # zhunru he zhunchu\n\n                iacontent = \'\'\n\n\n                if config["OUT_TCP"][\'on\'] == \'1\':\n                    iacontent += \'map em4 0.0.0.0/0 -> 0/32\\n\'\n                    for rule in config[\'OUT_TCP\'][\'rules\']:\n                        iacontent += \'\'\'rdr em0 %s/32 port %s -> 2.2.2.2 port %s\\n\'\'\' % (\n                            rule[\'myadr\'], rule[\'myport\'], rule[\'myport\'])\n\n                if config["IN_TCP"][\'on\'] == \'1\':\n\n                    iacontent += \'map em0 0.0.0.0/0 -> 0/32\\n\'\n                    for rule in config[\'IN_TCP\'][\'rules\']:\n                        iacontent += \'\'\'rdr em4 0.0.0.0/0 port %s -> %s port %s\\n\'\'\' % (\n                            rule[\'myport\'], rule[\'hisadr\'], rule[\'hisport\'])\n        else:\n            iacontent = \'COMMIN=/dev/owd0\\n\'\n            iacontent += \'COMMOUT=/dev/owd0\\n\'\n\n            flag_type = config[\'dt\'][\'rd\']\n            if flag_type == 0:\n                rs = ["IN_TCP", "IN_UDP", "IN_FTP", "IN_ORA"]\n            elif flag_type == 1:\n                rs = ["OUT_TCP", "OUT_UDP", "OUT_FTP", "OUT_ORA"]\n            else:\n                rs = ["OUT_TCP", "OUT_UDP", "OUT_FTP", "OUT_ORA", "IN_TCP", "IN_UDP", "IN_FTP", "IN_ORA"]\n            for i in rs:\n                if config[i][\'on\'] == \'1\':\n                    iacontent += \'FILE=/usr/nc-home/sox/%s\\n\' % i\n            iacontent += \'LOG=0\\n\'\n            iacontent += \'TCPIDLETIMEOUT=604800\\n\'\n\n        bsdfile_router.write(iacontent)\n        flag = True\n    except Exception as e:\n        print e\n        flag = False\n    finally:\n        bsdfile_router.close()\n    return flag\n\n\ndef write_owdiarule(rulename, rules):\n    try:\n        if getplatform():\n            rfname = open("%s%s%s" % (dpath(), "db/", rulename), "w")\n        else:\n            rfname = open("%s%s" % ("/usr/nc-home/sox/", rulename), "w")\n        cotent = \'\'\n        for rule in rules:\n            if rulename in ["OUT_TCP", "OUT_UDP", "OUT_FTP", "OUT_ORA"]:\n                cotent += \'\'\'PORT=%s:%s\\n\'\'\' % (rule[\'myadr\'], rule[\'myport\'])\n            else:\n                cotent += \'\'\'SERVER=%s:%s-%s:%s\\n\'\'\' % (rule[\'hisadr\'], rule[\'hisport\'], rule[\'myadr\'], rule[\'myport\'])\n        rfname.write(cotent)\n    except Exception as e:\n        print e\n    finally:\n        rfname.close()\n\n\ndef write_owdoarule(rulename, rules):\n    cotent = \'\'\n    flag = True\n    for rule in rules:\n        if rulename in ["IN_TCP", "IN_UDP", "IN_FTP", "IN_ORA"]:\n            cotent += \'\'\'echo \'PORT=%s:%s\' %s  /usr/nc-home/sox/%s;\'\'\' % (\n                rule[\'myadr\'], rule[\'myport\'], \'>\' if flag else \'>>\', rulename)\n        else:\n            cotent += \'\'\'echo \'SERVER=%s:%s-%s:%s\' %s /usr/nc-home/sox/%s;\'\'\' % (\n                rule[\'hisadr\'], rule[\'hisport\'], rule[\'myadr\'], rule[\'myport\'], \'>\' if flag else \'>>\', rulename)\n        flag = False\n    if not rules:\n        cotent += \'\'\'echo \'\' > /usr/nc-home/sox/%s;\'\'\' % rulename\n    try:\n        verification_ssh(rsetting(), cotent)\n    except Exception as e:\n        print e\n\nresponse._vars=response._caller(get_status)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/usr/nc-home/gap2py/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/usr/nc-home/gap2py/web2py/applications/gap2py/controllers/index.py", line 906, in <module>\n  File "/usr/nc-home/gap2py/web2py/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/usr/nc-home/gap2py/web2py/applications/gap2py/controllers/index.py", line 131, in get_status\n    return sj.dumps(s)\nUnboundLocalError: local variable \'s\' referenced before assignment\n'
p11
s.